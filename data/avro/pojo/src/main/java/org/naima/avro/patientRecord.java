/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package org.naima.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class patientRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"patientRecord\",\"namespace\":\"org.naima.avro\",\"fields\":[{\"name\":\"locality\",\"type\":\"string\"},{\"name\":\"subdistrict\",\"type\":\"string\"},{\"name\":\"district\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence locality;
  @Deprecated public java.lang.CharSequence subdistrict;
  @Deprecated public java.lang.CharSequence district;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public patientRecord() {}

  /**
   * All-args constructor.
   */
  public patientRecord(java.lang.CharSequence locality, java.lang.CharSequence subdistrict, java.lang.CharSequence district) {
    this.locality = locality;
    this.subdistrict = subdistrict;
    this.district = district;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return locality;
    case 1: return subdistrict;
    case 2: return district;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: locality = (java.lang.CharSequence)value$; break;
    case 1: subdistrict = (java.lang.CharSequence)value$; break;
    case 2: district = (java.lang.CharSequence)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'locality' field.
   */
  public java.lang.CharSequence getLocality() {
    return locality;
  }

  /**
   * Sets the value of the 'locality' field.
   * @param value the value to set.
   */
  public void setLocality(java.lang.CharSequence value) {
    this.locality = value;
  }

  /**
   * Gets the value of the 'subdistrict' field.
   */
  public java.lang.CharSequence getSubdistrict() {
    return subdistrict;
  }

  /**
   * Sets the value of the 'subdistrict' field.
   * @param value the value to set.
   */
  public void setSubdistrict(java.lang.CharSequence value) {
    this.subdistrict = value;
  }

  /**
   * Gets the value of the 'district' field.
   */
  public java.lang.CharSequence getDistrict() {
    return district;
  }

  /**
   * Sets the value of the 'district' field.
   * @param value the value to set.
   */
  public void setDistrict(java.lang.CharSequence value) {
    this.district = value;
  }

  /** Creates a new patientRecord RecordBuilder */
  public static org.naima.avro.patientRecord.Builder newBuilder() {
    return new org.naima.avro.patientRecord.Builder();
  }
  
  /** Creates a new patientRecord RecordBuilder by copying an existing Builder */
  public static org.naima.avro.patientRecord.Builder newBuilder(org.naima.avro.patientRecord.Builder other) {
    return new org.naima.avro.patientRecord.Builder(other);
  }
  
  /** Creates a new patientRecord RecordBuilder by copying an existing patientRecord instance */
  public static org.naima.avro.patientRecord.Builder newBuilder(org.naima.avro.patientRecord other) {
    return new org.naima.avro.patientRecord.Builder(other);
  }
  
  /**
   * RecordBuilder for patientRecord instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<patientRecord>
    implements org.apache.avro.data.RecordBuilder<patientRecord> {

    private java.lang.CharSequence locality;
    private java.lang.CharSequence subdistrict;
    private java.lang.CharSequence district;

    /** Creates a new Builder */
    private Builder() {
      super(org.naima.avro.patientRecord.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(org.naima.avro.patientRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.locality)) {
        this.locality = data().deepCopy(fields()[0].schema(), other.locality);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subdistrict)) {
        this.subdistrict = data().deepCopy(fields()[1].schema(), other.subdistrict);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.district)) {
        this.district = data().deepCopy(fields()[2].schema(), other.district);
        fieldSetFlags()[2] = true;
      }
    }
    
    /** Creates a Builder by copying an existing patientRecord instance */
    private Builder(org.naima.avro.patientRecord other) {
            super(org.naima.avro.patientRecord.SCHEMA$);
      if (isValidValue(fields()[0], other.locality)) {
        this.locality = data().deepCopy(fields()[0].schema(), other.locality);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.subdistrict)) {
        this.subdistrict = data().deepCopy(fields()[1].schema(), other.subdistrict);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.district)) {
        this.district = data().deepCopy(fields()[2].schema(), other.district);
        fieldSetFlags()[2] = true;
      }
    }

    /** Gets the value of the 'locality' field */
    public java.lang.CharSequence getLocality() {
      return locality;
    }
    
    /** Sets the value of the 'locality' field */
    public org.naima.avro.patientRecord.Builder setLocality(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.locality = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'locality' field has been set */
    public boolean hasLocality() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'locality' field */
    public org.naima.avro.patientRecord.Builder clearLocality() {
      locality = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'subdistrict' field */
    public java.lang.CharSequence getSubdistrict() {
      return subdistrict;
    }
    
    /** Sets the value of the 'subdistrict' field */
    public org.naima.avro.patientRecord.Builder setSubdistrict(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.subdistrict = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'subdistrict' field has been set */
    public boolean hasSubdistrict() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'subdistrict' field */
    public org.naima.avro.patientRecord.Builder clearSubdistrict() {
      subdistrict = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'district' field */
    public java.lang.CharSequence getDistrict() {
      return district;
    }
    
    /** Sets the value of the 'district' field */
    public org.naima.avro.patientRecord.Builder setDistrict(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.district = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'district' field has been set */
    public boolean hasDistrict() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'district' field */
    public org.naima.avro.patientRecord.Builder clearDistrict() {
      district = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    public patientRecord build() {
      try {
        patientRecord record = new patientRecord();
        record.locality = fieldSetFlags()[0] ? this.locality : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.subdistrict = fieldSetFlags()[1] ? this.subdistrict : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.district = fieldSetFlags()[2] ? this.district : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
